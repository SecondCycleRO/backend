openapi: 3.0.0
info:
  title: SecondCycle
  version: 1.0.0
paths:
  /register:
    post:
      summary: Register a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
                  enum: [buyer, seller, admin]
      responses:
        201:
          description: User successfully registered
        400:
          description: Bad request

  /login:
    post:
      summary: User login
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        200:
          description: Successful login
        401:
          description: Invalid email or password

  /profile:
    get:
      summary: Get user profile
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile data
        403:
          description: User not authenticated
        404:
          description: User not found

    put:
      summary: Update user profile
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        200:
          description: User profile updated
        403:
          description: User not authenticated
        404:
          description: User not found

  /{id}:
    delete:
      summary: Delete a user
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        200:
          description: User deleted
        403:
          description: Unauthorized
        404:
          description: User not found

  /products:
    get:
      summary: Get all products
      tags: [Product]
      responses:
        200:
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        500:
          description: Internal Server Error
    post:
      summary: Create a new product
      tags: [Product]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        201:
          description: Product successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad request
        500:
          description: Internal Server Error
  /products/{id}:
    get:
      summary: Get a product by ID
      tags: [Product]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to retrieve
      responses:
        200:
          description: Details of the specified product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Product not found
        500:
          description: Internal Server Error
    patch:
      summary: Update a product
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          description: Product successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Bad request
        404:
          description: Product not found
        500:
          description: Internal Server Error
    delete:
      summary: Delete a product
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the product to delete
      responses:
        200:
          description: Product successfully deleted
        404:
          description: Product not found
        500:
          description: Internal Server Error
  /transactions:
    get:
      summary: Get all transactions
      tags: [Transaction]
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        500:
          description: Internal Server Error
    post:
      summary: Create a new transaction
      tags: [Transaction]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        201:
          description: Transaction successfully created
        400:
          description: Bad request
        500:
          description: Internal Server Error
  /transactions/{id}:
    get:
      summary: Get a transaction by ID
      tags: [Transaction]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the transaction to retrieve
      responses:
        200:
          description: Details of the specified transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        404:
          description: Transaction not found
        500:
          description: Internal Server Error
    patch:
      summary: Update a transaction
      tags: [Transaction]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the transaction to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        200:
          description: Transaction successfully updated
        400:
          description: Bad request
        404:
          description: Transaction not found
        500:
          description: Internal Server Error
    delete:
      summary: Delete a transaction
      tags: [Transaction]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the transaction to delete
      responses:
        200:
          description: Transaction successfully deleted
        404:
          description: Transaction not found
        500:
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
        - role
      properties:
        _id:
          type: string
          format: objectId
          description: The auto-generated id of the user.
        username:
          type: string
          description: The username of the user.
        email:
          type: string
          format: email
          description: The email address of the user.
        password:
          type: string
          format: password
          description: The password of the user.
        role:
          type: string
          enum: [buyer, seller, admin]
          default: buyer
          description: The role of the user.
        createdAt:
          type: string
          format: date-time
          description: The date when the user was created.

    Product:
      type: object
      required:
        - title
        - description
        - price
        - category
        - condition
      properties:
        _id:
          type: string
          format: objectId
          description: The auto-generated id of the product.
        title:
          type: string
          description: The title of the product.
        description:
          type: string
          description: The description of the product.
        price:
          type: number
          description: The price of the product.
        category:
          type: string
          enum: [bicycle, scooter]
          description: The category of the product.
        condition:
          type: string
          enum: [new, used]
          description: The condition of the product.
        imageUrl:
          type: array
          items:
            type: string
            format: uri
          description: Array of image URLs of the product.
        createdAt:
          type: string
          format: date-time
          description: The date when the product was created.
    Transaction:
      type: object
      required:
        - productId
        - sellerId
        - buyerId
        - transactionType
        - price
      properties:
        _id:
          type: string
          format: objectId
          description: The auto-generated id of the transaction.
        productId:
          type: string
          format: objectId
          description: The id of the product involved in the transaction.
        sellerId:
          type: string
          format: objectId
          description: The id of the seller user.
        buyerId:
          type: string
          format: objectId
          description: The id of the buyer user.
        transactionType:
          type: string
          enum: [sale, rent]
          description: The type of transaction (sale or rent).
        transactionDate:
          type: string
          format: date-time
          description: The date when the transaction occurred.
        price:
          type: number
          description: The price involved in the transaction.
